## Class for settings of variables for building c on different archs
##
## This class sets the variables needed for when compiling c on native,
## machine, sdk, cross, sdk-cross, canadian-cross (=all). A similar class
## exists for c++, see the c++ class.

CLASS_DEPENDS += "${C_DEPENDS}"
C_DEPENDS			= "${C_DEPENDS_HOST}"
C_DEPENDS:>cross		= " ${C_DEPENDS_TARGET}"
C_DEPENDS:>sdk-cross		= " ${C_DEPENDS_TARGET}"
C_DEPENDS:>canadian-cross	= " ${C_DEPENDS_TARGET}"
C_DEPENDS_HOST			= "host-cross:cc"
C_DEPENDS_TARGET		= "target-cross:cc"

# CPPFLAGS
export CPPFLAGS = "${HOST_CPPFLAGS}"
export BUILD_CPPFLAGS

BUILD_CPPFLAGS		?= "-U_FORTIFY_SOURCE -isystem ${BUILD_SYSROOT}${stage_includedir}"
MACHINE_CPPFLAGS	?= ""
SDK_CPPFLAGS		?= ""

HOST_CPPFLAGS:native		 = "${BUILD_CPPFLAGS}"
HOST_CPPFLAGS:cross		 = "${BUILD_CPPFLAGS}"
HOST_CPPFLAGS:machine		 = "${MACHINE_CPPFLAGS}"
HOST_CPPFLAGS:sdk		 = "${SDK_CPPFLAGS}"
HOST_CPPFLAGS:sdk-cross		 = "${BUILD_CPPFLAGS}"
HOST_CPPFLAGS:canadian-cross	 = "${SDK_CPPFLAGS}"
TARGET_CPPFLAGS:native		 = "${BUILD_CPPFLAGS}"
TARGET_CPPFLAGS:cross		 = "${MACHINE_CPPFLAGS}"
TARGET_CPPFLAGS:machine		 = "${MACHINE_CPPFLAGS}"
TARGET_CPPFLAGS:sdk		 = "${SDK_CPPFLAGS}"
TARGET_CPPFLAGS:sdk-cross	 = "${SDK_CPPFLAGS}"
TARGET_CPPFLAGS:canadian-cross	 = "${MACHINE_CPPFLAGS}"

# CFLAGS
export CFLAGS = "${HOST_CFLAGS}"
export BUILD_CFLAGS

BUILD_CFLAGS		?= "${BUILD_CPPFLAGS} ${BUILD_CFLAGS_OPT}"
MACHINE_CFLAGS		?= "${MACHINE_CPPFLAGS} ${MACHINE_CFLAGS_OPT}"
SDK_CFLAGS		?= "${SDK_CPPFLAGS} ${SDK_CFLAGS_OPT}"

HOST_CFLAGS:native		 = "${BUILD_CFLAGS}"
HOST_CFLAGS:cross		 = "${BUILD_CFLAGS}"
HOST_CFLAGS:machine		 = "${MACHINE_CFLAGS}"
HOST_CFLAGS:sdk			 = "${SDK_CFLAGS}"
HOST_CFLAGS:sdk-cross		 = "${BUILD_CFLAGS}"
HOST_CFLAGS:canadian-cross	 = "${SDK_CFLAGS}"
TARGET_CFLAGS:native		 = "${BUILD_CFLAGS}"
TARGET_CFLAGS:cross		 = "${MACHINE_CFLAGS}"
TARGET_CFLAGS:machine		 = "${MACHINE_CFLAGS}"
TARGET_CFLAGS:sdk		 = "${SDK_CFLAGS}"
TARGET_CFLAGS:sdk-cross		 = "${SDK_CFLAGS}"
TARGET_CFLAGS:canadian-cross	 = "${MACHINE_CFLAGS}"

# CFLAGS_OPT
BUILD_CFLAGS_OPT	?= "-O3"
MACHINE_CFLAGS_OPT	?= "${CFLAGS_OPT_SPEED}"
SDK_CFLAGS_OPT		?= "-O3"

CFLAGS_OPT_SPEED	?= "-O2 \
	-fexpensive-optimizations -fomit-frame-pointer -frename-registers"
CFLAGS_OPT_SIZE		?= "-Os"
CFLAGS_OPT_DEBUG	?= "-O1 -g -fno-omit-frame-pointer"

# Enable -fPIC for powerpc architectures to support address
# space larger than 24 bits
CFLAGS_OPT_SPEED:>TARGET_CPU_powerpc += " -fPIC"
CFLAGS_OPT_SIZE:>TARGET_CPU_powerpc += " -fPIC"
CFLAGS_OPT_DEBUG:>TARGET_CPU_powerpc += " -fPIC"

HOST_CFLAGS_OPT:native		 = "${BUILD_CFLAGS_OPT}"
HOST_CFLAGS_OPT:cross		 = "${BUILD_CFLAGS_OPT}"
HOST_CFLAGS_OPT:machine		 = "${MACHINE_CFLAGS_OPT}"
HOST_CFLAGS_OPT:sdk		 = "${SDK_CFLAGS_OPT}"
HOST_CFLAGS_OPT:sdk-cross	 = "${BUILD_CFLAGS_OPT}"
HOST_CFLAGS_OPT:canadian-cross	 = "${SDK_CFLAGS_OPT}"
TARGET_CFLAGS_OPT:native	 = "${BUILD_CFLAGS_OPT}"
TARGET_CFLAGS_OPT:cross		 = "${MACHINE_CFLAGS_OPT}"
TARGET_CFLAGS_OPT:machine	 = "${MACHINE_CFLAGS_OPT}"
TARGET_CFLAGS_OPT:sdk		 = "${SDK_CFLAGS_OPT}"
TARGET_CFLAGS_OPT:sdk-cross	 = "${SDK_CFLAGS_OPT}"
TARGET_CFLAGS_OPT:canadian-cross = "${MACHINE_CFLAGS_OPT}"

# LDFLAGS
export LDFLAGS = "${HOST_LDFLAGS}"
export BUILD_LDFLAGS

BUILD_LDFLAGS		?= "-Wl,-O1 -Wl,-z -Wl,origin"
BUILD_LDFLAGS:BUILD_KERNEL_darwin ?= ""
MACHINE_LDFLAGS		?= "-Wl,-O1"
SDK_LDFLAGS		?= "-Wl,-O1"

BUILD_LINK_HASH_STYLE	?= "gnu"
MACHINE_LINK_HASH_STYLE	?= "gnu"
SDK_LINK_HASH_STYLE	?= "both"

HOST_LDFLAGS_HASH_STYLE	 = "-Wl,--hash-style=${BUILD_LINK_HASH_STYLE}"
HOST_LDFLAGS_HASH_STYLE:machine		= "${MACHINE_HOST_LDFLAGS_HASH_STYLE}"
HOST_LDFLAGS_HASH_STYLE:sdk		= "${SDK_HOST_LDFLAGS_HASH_STYLE}"
HOST_LDFLAGS_HASH_STYLE:canadian-cross	= "${SDK_HOST_LDFLAGS_HASH_STYLE}"
HOST_LDFLAGS_HASH_STYLE:HOST_KERNEL_darwin = ""
MACHINE_HOST_LDFLAGS_HASH_STYLE = "-Wl,--hash-style=${MACHINE_LINK_HASH_STYLE}"
MACHINE_HOST_LDFLAGS_HASH_STYLE:HOST_OS_mingw32 = ""
SDK_HOST_LDFLAGS_HASH_STYLE = "-Wl,--hash-style=${SDK_LINK_HASH_STYLE}"
SDK_HOST_LDFLAGS_HASH_STYLE:HOST_OS_mingw32 = ""

TARGET_LDFLAGS_HASH_STYLE = "-Wl,--hash-style=${BUILD_LINK_HASH_STYLE}"
TARGET_LDFLAGS_HASH_STYLE:cross		= "${MACHINE_TARGET_LDFLAGS_HASH_STYLE}"
TARGET_LDFLAGS_HASH_STYLE:machine	= "${MACHINE_TARGET_LDFLAGS_HASH_STYLE}"
TARGET_LDFLAGS_HASH_STYLE:canadian-cross= "${MACHINE_TARGET_LDFLAGS_HASH_STYLE}"
TARGET_LDFLAGS_HASH_STYLE:sdk		= "${SDK_TARGET_LDFLAGS_HASH_STYLE}"
TARGET_LDFLAGS_HASH_STYLE:sdk-cross	= "${SDK_TARGET_LDFLAGS_HASH_STYLE}"
MACHINE_TARGET_LDFLAGS_HASH_STYLE = "-Wl,--hash-style=${MACHINE_LINK_HASH_STYLE}"
MACHINE_TARGET_LDFLAGS_HASH_STYLE:TARGET_OS_mingw32 = ""
SDK_TARGET_LDFLAGS_HASH_STYLE = "-Wl,--hash-style=${SDK_LINK_HASH_STYLE}"
SDK_TARGET_LDFLAGS_HASH_STYLE:TARGET_OS_mingw32 = ""

inherit chrpath

HOST_LDFLAGS:native		 = "${BUILD_LDFLAGS} \
	${HOST_LDFLAGS_HASH_STYLE} \
	-L${STAGE_DIR}/native${stage_libdir} \
	-Wl,-rpath,${STAGE_DIR}/native${stage_libdir} \
"

HOST_LDFLAGS:cross		 = "${BUILD_LDFLAGS} \
	${HOST_LDFLAGS_HASH_STYLE} \
	-L${STAGE_DIR}/cross${stage_libdir} \
	-L${STAGE_DIR}/native${stage_libdir} \
	-Wl,-rpath,${STAGE_DIR}/cross${stage_libdir} \
	-Wl,-rpath,${STAGE_DIR}/native${stage_libdir} \
"

HOST_LDFLAGS:machine		 = "${MACHINE_LDFLAGS} \
	${HOST_LDFLAGS_HASH_STYLE} \
	-Wl,-rpath,${D}${machine_libdir} \
	-Wl,-rpath,${D}${machine_base_libdir} \
"

SDK_STATIC_LDFLAGS = ""
SDK_STATIC_LDFLAGS:USE_sdk_static = "-static"

HOST_LDFLAGS:sdk		 = "${SDK_LDFLAGS} \
	${HOST_LDFLAGS_HASH_STYLE} \
	-Wl,-rpath,${D}${sdk_libdir} \
	-Wl,-rpath,${D}${sdk_base_libdir} \
	${SDK_STATIC_LDFLAGS} \
"

HOST_LDFLAGS:sdk-cross		 = "${BUILD_LDFLAGS} \
	${HOST_LDFLAGS_HASH_STYLE} \
	-L${STAGE_DIR}/sdk-cross${stage_libdir} \
	-L${STAGE_DIR}/native${stage_libdir} \
	-Wl,-rpath,${STAGE_DIR}/sdk-cross${stage_libdir} \
	-Wl,-rpath,${STAGE_DIR}/native${stage_libdir} \
"

HOST_LDFLAGS:canadian-cross	 = "${SDK_LDFLAGS} \
	${HOST_LDFLAGS_HASH_STYLE} \
	-Wl,-rpath,${D}${sdk_libdir} \
	-Wl,-rpath,${D}${sdk_base_libdir} \
	${SDK_STATIC_LDFLAGS} \
"

TARGET_LDFLAGS:native		 = "${BUILD_LDFLAGS} \
	${TARGET_LDFLAGS_HASH_STYLE} \
	-L${STAGE_DIR}/native${stage_libdir} \
	-Wl,-rpath,${STAGE_DIR}/native${stage_libdir} \
"

TARGET_LDFLAGS:cross		 = "${MACHINE_LDFLAGS} \
	${TARGET_LDFLAGS_HASH_STYLE} \
"

TARGET_LDFLAGS:machine		 = "${MACHINE_LDFLAGS} \
	${TARGET_LDFLAGS_HASH_STYLE} \
"

TARGET_LDFLAGS:sdk		 = "${SDK_LDFLAGS} \
	${TARGET_LDFLAGS_HASH_STYLE} \
	-Wl,-rpath,${D}${sdk_libdir} \
	-Wl,-rpath,${D}${sdk_base_libdir} \
	${SDK_STATIC_LDFLAGS} \
"

TARGET_LDFLAGS:sdk-cross	 = "${SDK_LDFLAGS} \
	${TARGET_LDFLAGS_HASH_STYLE} \
	-Wl,-rpath,${STAGE_DIR}/sdk${sdk_libdir} \
	-Wl,-rpath,${STAGE_DIR}/sdk${sdk_base_libdir} \
	${SDK_STATIC_LDFLAGS} \
"

TARGET_LDFLAGS:canadian-cross	 = "${MACHINE_LDFLAGS} \
	${TARGET_LDFLAGS_HASH_STYLE} \
"

# CC
export CC = "${HOST_CC}"
export BUILD_CC
BUILD_CC	= "${BUILD_PREFIX}gcc"
HOST_CC		= "${HOST_PREFIX}gcc"
TARGET_CC	= "${TARGET_PREFIX}gcc"

# CPP
export CPP = "${HOST_CPP}"
export BUILD_CPP
BUILD_CPP	= "${BUILD_CC} -E"
HOST_CPP	= "${HOST_CC} -E"
TARGET_CPP	= "${TARGET_CC} -E"

# LD
export LD = "${HOST_LD}"
export BUILD_LD
BUILD_LD	= "${BUILD_PREFIX}ld"
HOST_LD		= "${HOST_PREFIX}ld"
TARGET_LD	= "${TARGET_PREFIX}ld"

# CCLD
export CCLD = "${HOST_CCLD}"
export BUILD_CCLD
BUILD_CCLD	= "${BUILD_PREFIX}gcc"
HOST_CCLD	= "${HOST_PREFIX}gcc"
TARGET_CCLD	= "${TARGET_PREFIX}gcc"

# AS
export AS = "${HOST_AS}"
export BUILD_AS
BUILD_AS	= "${BUILD_PREFIX}as"
HOST_AS		= "${HOST_PREFIX}as"
TARGET_AS	= "${TARGET_PREFIX}as"

# RANLIB
export RANLIB = "${HOST_RANLIB}"
export BUILD_RANLIB
BUILD_RANLIB	= "${BUILD_PREFIX}ranlib"
HOST_RANLIB	= "${HOST_PREFIX}ranlib"
TARGET_RANLIB	= "${TARGET_PREFIX}ranlib"

# STRIP
export STRIP = "${HOST_STRIP}"
export BUILD_STRIP
BUILD_STRIP	= "${BUILD_PREFIX}strip"
HOST_STRIP	= "${HOST_PREFIX}strip"
TARGET_STRIP	= "${TARGET_PREFIX}strip"

# OBJCOPY
export OBJCOPY = "${HOST_OBJCOPY}"
export BUILD_OBJCOPY
BUILD_OBJCOPY	= "${BUILD_PREFIX}objcopy"
HOST_OBJCOPY	= "${HOST_PREFIX}objcopy"
TARGET_OBJCOPY	= "${TARGET_PREFIX}objcopy"

# OBJDUMP
export OBJDUMP = "${HOST_OBJDUMP}"
export BUILD_OBJDUMP
BUILD_OBJDUMP	= "${BUILD_PREFIX}objdump"
HOST_OBJDUMP	= "${HOST_PREFIX}objdump"
TARGET_OBJDUMP	= "${TARGET_PREFIX}objdump"

# NM
export NM = "${HOST_NM}"
export BUILD_NM
BUILD_NM	= "${BUILD_PREFIX}nm"
HOST_NM		= "${HOST_PREFIX}nm"
TARGET_NM	= "${TARGET_PREFIX}nm"

# AR
export AR = "${HOST_AR}"
export BUILD_AR
BUILD_AR	= "${BUILD_PREFIX}ar"
HOST_AR		= "${HOST_PREFIX}ar"
TARGET_AR	= "${TARGET_PREFIX}ar"

# Local Variables:
# mode: python
# End:
